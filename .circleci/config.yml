version: 2.1

jobs:
  run-lint:
    docker:
      - image: python:3.7.3-stretch

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      # run build
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install

      # run lint
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

  upload-docker-container-to-hub:
    docker:
      - image: circleci/golang:1.15

    working_directory: ~/repo

    steps:
      - checkout

      - setup_remote_docker:
          version: 19.03.13

      - run:
          name: Build docker container
          command: |
            docker build --tag=$IMAGE_NAME .
            docker image ls

      - run:
          name: Upload Docker to Dockerhub
          command: |
            echo "Docker ID and Image: $IMAGE_NAME"
            docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"
            docker tag $IMAGE_NAME $DOCKER_USERNAME/$IMAGE_NAME:$CIRCLE_WORKFLOW_ID
            docker push $DOCKER_USERNAME/$IMAGE_NAME:$CIRCLE_WORKFLOW_ID

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Check EKS network
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/network.yml \
              --tags project=${ENVIRONMENT_NAME} \
              --stack-name "${ENVIRONMENT_NAME}-eks-network" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/network-parameters.json
      - run:
          name: Check EKS Cluster
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/cluster.yml \
              --tags project=${ENVIRONMENT_NAME} \
              --stack-name "${ENVIRONMENT_NAME}-eks-cluster" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/cluster-parameters.json \
              --capabilities CAPABILITY_NAMED_IAM
          no_output_timeout: 15m
      - run:
          name: Check Nodegroup
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/nodegroup.yml \
              --tags project=${ENVIRONMENT_NAME} \
              --stack-name "${ENVIRONMENT_NAME}-eks-nodegroup" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/nodegroup-parameters.json \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Check management instances
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/management.yml \
              --tags project=${ENVIRONMENT_NAME} \
              --stack-name "${ENVIRONMENT_NAME}-eks-management" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/management-parameters.json
      - run:
          name: Extract the IPs of the management instances for Ansible
          command: |
            echo [management] > ~/inventory.txt
            aws ec2 describe-instances \
              --region "${AWS_DEFAULT_REGION}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=${ENVIRONMENT_NAME}-management*" \
              --output text >> ~/inventory.txt
            cat ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "74:a0:38:c0:87:89:fd:86:53:a5:63:11:50:87:2f:76:9a:7a:c9:67"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cat ~/inventory.txt
            cd ansible
            export ANSIBLE_HOST_KEY_CHECKING=false
            export ANSIBLE_IGNORE_UNREACHABLE=true
            ansible-playbook -i ~/inventory.txt configure-server.yml

  configure-cluster:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "74:a0:38:c0:87:89:fd:86:53:a5:63:11:50:87:2f:76:9a:7a:c9:67"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cat ~/inventory.txt
            cd ansible
            export ANSIBLE_HOST_KEY_CHECKING=false
            export ANSIBLE_IGNORE_UNREACHABLE=true
            ansible-playbook -i ~/inventory.txt configure-cluster.yml
      - run:
          name: Wait for LoadBalancer
          command: |
            cat ~/inventory.txt
            echo "Wait 60 seconds..."
            sleep 60
      - run:
          name: Display the LoadBalancer's DNS name
          command: |
            cat ~/inventory.txt
            cd ansible
            export ANSIBLE_HOST_KEY_CHECKING=false
            export ANSIBLE_IGNORE_UNREACHABLE=true
            ansible-playbook -i ~/inventory.txt save-elb-dns.yml
            cat ~/elb_dns.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - elb_dns.txt

  deploy-docker:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "74:a0:38:c0:87:89:fd:86:53:a5:63:11:50:87:2f:76:9a:7a:c9:67"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Deploy newest Docker Image
          command: |
            cat ~/inventory.txt
            cd ansible
            export ANSIBLE_HOST_KEY_CHECKING=false
            export ANSIBLE_IGNORE_UNREACHABLE=true
            ansible-playbook -i ~/inventory.txt deploy-app.yml
          no_output_timeout: 2m

workflows:
  default:
    jobs:
      - run-lint
      - upload-docker-container-to-hub:
          requires:
            - run-lint
      - deploy-infrastructure
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - configure-cluster:
          requires:
            - configure-infrastructure
            - upload-docker-container-to-hub
      - deploy-docker:
          requires:
            - configure-cluster
